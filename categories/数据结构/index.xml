<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on 孤星的天空的博客</title>
    <link>http://www.solitarystarsky.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on 孤星的天空的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 27 Nov 2019 15:41:11 +0000</lastBuildDate>
    
	<atom:link href="http://www.solitarystarsky.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>哈夫曼树及其生成</title>
      <link>http://www.solitarystarsky.github.io/post/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E7%94%9F%E6%88%90/</link>
      <pubDate>Wed, 27 Nov 2019 15:41:11 +0000</pubDate>
      
      <guid>http://www.solitarystarsky.github.io/post/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91%E5%8F%8A%E5%85%B6%E7%94%9F%E6%88%90/</guid>
      <description>什么是哈夫曼树 哈夫曼树又称最优二叉树，是一种带权路径长度最短的二叉树。所谓树的带权路径长度，就是树中所有的叶结点的权值乘上其到根结点的路径长度（若根结点为0层，叶结点到根结点的路径长度为叶结点的层数）。树的带权路径长度记为WPL=(W1L1+W2L2+W3L3+&amp;hellip;+ WnLn)，N个权值Wi(i=1,2,&amp;hellip;n)构成一棵有N个叶结点的二叉树，相应的叶结点的路径长度为Li(i=1,2,&amp;hellip;n)。可以证明哈夫曼树的WPL是最小的。 构造哈夫曼树的算法如下： 1）对给定的n个权值{W1,W2,W3,&amp;hellip;,Wi,&amp;hellip;,Wn}构成n棵二叉树的初始集合F={T1,T2,T3,&amp;hellip;,Ti,&amp;hellip;, Tn}，其中每棵二叉树Ti中只有一个权值为Wi的根结点，它的左右子树均为空。 2）在F中选取两棵根结点权值最小的树作为新构造的二叉树的左右子树，新二叉树的根结点的权值为其左右子树的根结点的权值之和。 3）从F中删除这两棵树，并把这棵新的二叉树同样以升序排列加入到集合F中。 4）重复2）和3），直到集合F中只有一棵二叉树为止。
 例如，对于4个权值为1、3、5、7的节点构造一棵哈夫曼树，其构造过程如下图所示：  哈夫曼树的算法实现 #include&amp;lt;iostream&amp;gt;#include&amp;lt;iomanip&amp;gt;#include&amp;lt;cfloat&amp;gt;using namespace std; const int n=5; const int m=2*n-1; typedef struct{ float weight; int parent,lchild,rchild; }nodetype; typedef nodetype hftree[m]; hftree T; void huffman(hftree T){ int p1,p2,i,j; float small1,small2; for(i=0;i&amp;lt;n;i++){ T[i].parent=T[i].lchild=T[i].rchild=-1; } for(i=0;i&amp;lt;n;i++){ cin&amp;gt;&amp;gt;T[i].weight; } for(i=n;i&amp;lt;m;i++){ p1=p2=-1; small1=small2=FLT_MAX; for(j=0;j&amp;lt;=i-1;j++){ if(T[j].parent!=-1)continue; if(T[j].weight&amp;lt;small1){ small2=small1; small1=T[j].weight; p2=p1; p1=j; } else if(T[j].weight&amp;lt;small2){ small2=T[j].weight; p2=j; } } T[p1].parent=T[p2].parent=i; T[i].parent=-1; T[i].lchild=p1; T[i].rchild=p2; T[i].weight=small1+small2; } } 输出哈夫曼树 这里用到了头文件，主要是运用setw()控制一下输出的格式</description>
    </item>
    
    <item>
      <title>二叉树的层序生成</title>
      <link>http://www.solitarystarsky.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E7%94%9F%E6%88%90/</link>
      <pubDate>Sat, 23 Nov 2019 16:51:49 +0000</pubDate>
      
      <guid>http://www.solitarystarsky.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E7%94%9F%E6%88%90/</guid>
      <description>算法的基本思想：依次输入结点信息，若输入的结点不是虚结点，则建立一个新结点；若新结点是第1个结点，则令其为根节点；否则将新结点作为孩子链接到它的双亲结点上。如此重复下去，直到输入字符“#”为止
核心代码：
Bitree level_create(){ char ch; pointer Q[maxsize+1]; int front,rear; pointer root,s; root=NULL; front=rear=0; while(cin&amp;gt;&amp;gt;ch,ch!=&amp;#39;#&amp;#39;){ if(ch!=&amp;#39;@&amp;#39;){ s=new node; s-&amp;gt;data=ch; s-&amp;gt;lchild=s-&amp;gt;rchild=NULL; } else s=NULL; rear++;//不管结点是否为虚，都要入队  Q[rear]=s; if(rear==1){//第一个结点是根，要修改头指针，它不是孩子  root=s; front=1; } else{ if(s&amp;amp;&amp;amp;Q[front]){ if(rear%2==0)Q[front]-&amp;gt;lchild=s; else Q[front]-&amp;gt;rchild=s; } if(rear%2==1)front++;//不论是否为虚，右孩子入队后，双亲出队  } } return root; } </description>
    </item>
    
    <item>
      <title>链式前向星</title>
      <link>http://www.solitarystarsky.github.io/post/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/</link>
      <pubDate>Thu, 21 Nov 2019 09:00:39 +0000</pubDate>
      
      <guid>http://www.solitarystarsky.github.io/post/%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/</guid>
      <description>在学习算法spfa的过程之中，其代码的实现过程是用了链式前向星结构实现，因此了解并学习了一下链式前向星
什么是链式前向星 前向星的本质其实是静态链表，如果说邻接表存的是点的集合，那么链式前向星是存的是边的集合。
为什么要采用链式前向星 如果说邻接表是不好写但效率好，邻接矩阵是好写但效率低的话，前向星就是一个相对中庸的数据结构。前向星固然好些，但效率并不高。而在优化为链式前向星后，效率也得到了较大的提升。虽然说，世界上对链式前向星的使用并不是很广泛，但在不愿意写复杂的邻接表的情况下，链式前向星也是一个很优秀的数据结构。
主要代码实现 struct Edge { int next;//下一条边的编号 	int to;//这条边到达的点 	int dis;//这条边的长度 }edge[maxm]; void add_edge(int from,int to,int dis) //加入一条从from到to距离为dis的单向边 { edge[++num_edge].next=head[from]; edge[num_edge].to=to;//将to记录 	edge[num_edge].dis=dis;//将dis记录 	head[from]=num_edge;// } head[i]数组与next 关于head[i]的含义，我们理解为指向 i 结点的第一条边。这是方便于我们在接下来调用的时候能够完好的访问：i结点第一条边通过head访问，剩下的边通过next指针指向。
总的来说： head[i]来指向 i 结点的第一条边 next指向下一条边
调用核心代码 for(int i=head[k];i!=0;i=edge[i].next) </description>
    </item>
    
    <item>
      <title>顺序结构循环队列</title>
      <link>http://www.solitarystarsky.github.io/post/%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Wed, 13 Nov 2019 21:23:36 +0000</pubDate>
      
      <guid>http://www.solitarystarsky.github.io/post/%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/</guid>
      <description>#include&amp;lt;iostream&amp;gt;using namespace std; typedef int datatype; const int maxsize = 100; typedef struct node { datatype data[maxsize]; int front, rear; }sqqueue; void init_sqqueue(sqqueue* lq) { lq-&amp;gt;front = lq-&amp;gt;rear = 0; cout &amp;lt;&amp;lt; &amp;#34;创建队列成功&amp;#34; &amp;lt;&amp;lt; endl; } int en_sqqueue(sqqueue* lq, datatype x) { if ((lq-&amp;gt;rear + 1) % maxsize == lq-&amp;gt;front) { cout &amp;lt;&amp;lt; &amp;#34;队满，无法入队&amp;#34; &amp;lt;&amp;lt; endl; return 0; } lq-&amp;gt;rear = (lq-&amp;gt;rear + 1) % maxsize; lq-&amp;gt;data[lq-&amp;gt;rear] = x; cout &amp;lt;&amp;lt; &amp;#34;入队元素为&amp;#34; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; endl; return 1; } int de_sqqueue(sqqueue* lq, datatype* x) { if (lq-&amp;gt;front == lq-&amp;gt;rear) { cout &amp;lt;&amp;lt; &amp;#34;队列为空&amp;#34; &amp;lt;&amp;lt; endl; return 0; } lq-&amp;gt;front = (lq-&amp;gt;front + 1) % maxsize; *x = lq-&amp;gt;data[lq-&amp;gt;front]; cout &amp;lt;&amp;lt; &amp;#34;出队元素为&amp;#34; &amp;lt;&amp;lt; *x &amp;lt;&amp;lt; endl; return 1; } int empty_sqqueue(sqqueue* lq) { if (lq-&amp;gt;front == lq-&amp;gt;rear) { cout &amp;lt;&amp;lt; &amp;#34;队空&amp;#34; &amp;lt;&amp;lt; endl; return 1; } else { cout &amp;lt;&amp;lt; &amp;#34;队不空&amp;#34; &amp;lt;&amp;lt; endl; return 0; } } int main() { sqqueue* lq; datatype* x; x = new datatype; lq = new sqqueue; init_sqqueue(lq); empty_sqqueue(lq); en_sqqueue(lq, 100); en_sqqueue(lq, 200); empty_sqqueue(lq); de_sqqueue(lq, x); de_sqqueue(lq, x); empty_sqqueue(lq); return 0; } </description>
    </item>
    
    <item>
      <title>链式队列</title>
      <link>http://www.solitarystarsky.github.io/post/%E9%93%BE%E5%BC%8F%E9%98%9F%E5%88%97/</link>
      <pubDate>Tue, 12 Nov 2019 21:10:45 +0000</pubDate>
      
      <guid>http://www.solitarystarsky.github.io/post/%E9%93%BE%E5%BC%8F%E9%98%9F%E5%88%97/</guid>
      <description>最近数据结构老师要求我们在上机课上要不看书敲出来链式队列并实现功能，所以在此练练手
由于比较简单，所以直接上代码
#include&amp;lt;iostream&amp;gt;using namespace std;typedef int datatype;typedef struct node* pointer;struct node{datatype data;pointer next;};typedef struct{pointer front,rear;}lkqueue;void init_lkqueue(lkqueue *lq){//创建链队列 pointer p;p=new node;p-&amp;gt;next=NULL;lq-&amp;gt;front=p;lq-&amp;gt;rear=p;}void enter_lkqueue(lkqueue *lq,datatype x){//入队功能实现 pointer s;s=new node;s-&amp;gt;data=x;lq-&amp;gt;rear-&amp;gt;next=s;lq-&amp;gt;rear=s;s-&amp;gt;next=NULL;}int empty_lkqueue(lkqueue *lq){//判断队列是否为空 if(lq-&amp;gt;front==lq-&amp;gt;rear)return 1;else return 0;}int out_lkqueue(lkqueue *lq,datatype *x){//出队功能实现 pointer s;if(lq-&amp;gt;front==lq-&amp;gt;rear){cout&amp;lt;&amp;lt;&amp;#34;队空，不能出队!&amp;#34;&amp;lt;&amp;lt;endl;return 0;}s=lq-&amp;gt;front-&amp;gt;next;*x=s-&amp;gt;data;lq-&amp;gt;front-&amp;gt;next=s-&amp;gt;next;cout&amp;lt;&amp;lt;&amp;#34;出队元素为&amp;#34;&amp;lt;&amp;lt;*x&amp;lt;&amp;lt;endl;delete s;return 1;}int main(){lkqueue *lq;lq=new lkqueue;datatype *x;x=new datatype;init_lkqueue(lq);empty_lkqueue(lq);enter_lkqueue(lq,100);empty_lkqueue(lq);out_lkqueue(lq,x);empty_lkqueue(lq);return 0;}</description>
    </item>
    
    <item>
      <title>二叉树的链接结构</title>
      <link>http://www.solitarystarsky.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%93%BE%E6%8E%A5%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 12 Nov 2019 20:51:45 +0000</pubDate>
      
      <guid>http://www.solitarystarsky.github.io/post/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%93%BE%E6%8E%A5%E7%BB%93%E6%9E%84/</guid>
      <description>对着书本敲了一个钟的二叉树，被二叉树建立时的输入问题困扰了很久。二叉树的建立一般使用递归算法，将所有节点的数据猛的输入，递归无法停止，二叉树就无法建立。 自己对着书本敲了一次也没发现怎么回事，最后看了一篇博文之后，豁然开朗。我们在输入节点数据的时候，必须输入空闲叶子结点，并用特殊符号标记。
最后自己终于实现了最终的二叉链表的构造及其三种顺序遍历的实现 PS：输入的时候得适当制造一定数量的空节点才能结束二叉树的输入，这个需要个人自己体会。 代码如下：
#include &amp;lt;iostream&amp;gt;using namespace std;typedef struct node* pointer;typedef char datatype;typedef struct node {datatype data;pointer left, right;}BinTNode;//定义结构体BinTNodetypedef BinTNode* BinTree;//结构体指针BinTreeBinTree Create_Tree()//二叉树的创建{BinTree p;char c;cin &amp;gt;&amp;gt; c;if (c == &amp;#39;#&amp;#39;)//如果遇到字符串&amp;#34;#&amp;#34;，则设该结点值为空	p = NULL;else{p = new node;p-&amp;gt;data = c;p-&amp;gt;left = Create_Tree();p-&amp;gt;right = Create_Tree();}return p;//返回二叉树结构体指针}void preorder(BinTree T) {//先序遍历	if (T !</description>
    </item>
    
    <item>
      <title>栈实现十进制转换二进制</title>
      <link>http://www.solitarystarsky.github.io/post/%E6%A0%88%E5%AE%9E%E7%8E%B0%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%BA%8C%E8%BF%9B%E5%88%B6/</link>
      <pubDate>Thu, 17 Oct 2019 21:47:36 +0000</pubDate>
      
      <guid>http://www.solitarystarsky.github.io/post/%E6%A0%88%E5%AE%9E%E7%8E%B0%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2%E4%BA%8C%E8%BF%9B%E5%88%B6/</guid>
      <description>思路分析： 只需要用一个变量来存储余数，并入栈即可。另外需要注意一下maxsize-1才是栈满；p.data[p.top]代表的是datatype x的值。 下面是代码实现：
#include &amp;lt;iostream&amp;gt;using namespace std;const int maxsize = 16;typedef int datatype;typedef struct {datatype data[maxsize];int top;}sqstack;void init_sqstack(sqstack* sq) {sq-&amp;gt;top = -1;}int empty_sqstack(sqstack* sq) {if (sq-&amp;gt;top == -1)return 1;else return 0;}int push_sqstack(sqstack* sq, datatype x) {if (sq-&amp;gt;top == maxsize - 1) {cout &amp;lt;&amp;lt; &amp;#34;栈满，不能进栈！\n&amp;#34;;return 0;}sq-&amp;gt;data[++sq-&amp;gt;top] = x;return 1;}int pop_sqstack(sqstack* sq, datatype* x) {if (sq-&amp;gt;top == -1) {cout &amp;lt;&amp;lt; &amp;#34;栈空，不能退栈!</description>
    </item>
    
    <item>
      <title>栈实现括号匹配</title>
      <link>http://www.solitarystarsky.github.io/post/%E6%A0%88%E5%AE%9E%E7%8E%B0%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Tue, 15 Oct 2019 08:07:45 +0000</pubDate>
      
      <guid>http://www.solitarystarsky.github.io/post/%E6%A0%88%E5%AE%9E%E7%8E%B0%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</guid>
      <description>如何用栈实现简单的括号匹配 思路很简单，利用栈的压栈出栈的特点，输入的字符为“（”就入栈，“）”就出栈，如果栈是空，就是匹配成功，因为“（）”成对出现。
接下来为代码实现，分别是C++本身的STL库中的stack和自己手写的stack功能实现： C++STL:
#include&amp;lt;iostream&amp;gt;#include&amp;lt;stack&amp;gt;using namespace std;stack&amp;lt;int&amp;gt;st;int main(){char x;int flag,a,b;while(cin&amp;gt;&amp;gt;x){if(x==&amp;#39;(&amp;#39;){st.push(x);}if(x==&amp;#39;)&amp;#39;){st.pop();}if(st.empty()){flag=1;}else {flag=0;}}if(flag){cout&amp;lt;&amp;lt;&amp;#34;1&amp;#34;&amp;lt;&amp;lt;endl;}else {cout&amp;lt;&amp;lt;&amp;#34;0&amp;#34;&amp;lt;&amp;lt;endl;}return 0;} 自己手写的栈功能：
#include&amp;lt;iostream&amp;gt;using namespace std;const int maxsize=100;typedef char datatype;typedef char ElemType;typedef struct{datatype data[maxsize];int top;}sqstack; void init_sqstack(sqstack *sq){sq-&amp;gt;top=-1;}int empty(sqstack *sq){if(sq-&amp;gt;top==-1){return 1;}else return 0;}int push_sqstack(sqstack *sq,datatype x){if(sq-&amp;gt;top==maxsize-1){cout&amp;lt;&amp;lt;&amp;#34;栈满，不能进栈!</description>
    </item>
    
    <item>
      <title>链表之多项式加法</title>
      <link>http://www.solitarystarsky.github.io/post/%E9%93%BE%E8%A1%A8%E4%B9%8B%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%8A%A0%E6%B3%95/</link>
      <pubDate>Mon, 14 Oct 2019 21:50:12 +0000</pubDate>
      
      <guid>http://www.solitarystarsky.github.io/post/%E9%93%BE%E8%A1%A8%E4%B9%8B%E5%A4%9A%E9%A1%B9%E5%BC%8F%E5%8A%A0%E6%B3%95/</guid>
      <description>数据结构上机课的一次作业： 实现多项式的加法。开始并没有立刻做出来，主要原因是用insert插入的时候的i值没有把握好，以及当值两个链表中的指数相等的时候的处理没有到位。后来经过一番修改后，功能都得以实现。
当天晚上学习了一下怎么放图片博客，终于万事俱备，开始写博客啦 #include &amp;lt;iostream&amp;gt;using namespace std;typedef int datatype;typedef int index;typedef struct node* pointer;struct node {datatype data;index ind;pointer next;};typedef pointer lklist;lklist init() {pointer head;head = new node;head-&amp;gt;next = NULL;return head;}lklist create(lklist head) {pointer rear, s;int a,b;rear = head;while (cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b &amp;amp;&amp;amp; (a != -1 &amp;amp;&amp;amp; b !</description>
    </item>
    
  </channel>
</rss>